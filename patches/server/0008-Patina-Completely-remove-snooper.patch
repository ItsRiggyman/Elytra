From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: foss-mc <69294560+foss-mc@users.noreply.github.com>
Date: Thu, 1 Jul 2021 11:54:44 +0000
Subject: [PATCH] (Patina) Completely remove snooper

Original code by PatinaMC, licensed under GNU General Public License v3.0
You can find the original code on https://github.com/PatinaMC/Patina

diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 200ef28c158fea1a3262c07fdd58a66bf55cfb93..e4d2dec4651b972f724a57f61ba3b21e3a51a96f 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -189,14 +189,14 @@ import org.bukkit.event.server.ServerLoadEvent;
 import co.aikar.timings.MinecraftTimings; // Paper
 import org.spigotmc.SlackActivityAccountant; // Spigot
 
-public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements SnooperPopulator, CommandSource, AutoCloseable {
+public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements CommandSource, AutoCloseable { // SnooperPopulator, // Elytra - completely remove snooper
 
     private static MinecraftServer SERVER; // Paper
     public static final Logger LOGGER = LogManager.getLogger();
     private static final float AVERAGE_TICK_TIME_SMOOTHING = 0.8F;
     private static final int TICK_STATS_SPAN = 100;
     public static final int MS_PER_TICK = 50;
-    private static final int SNOOPER_UPDATE_INTERVAL = 6000;
+    //private static final int SNOOPER_UPDATE_INTERVAL = 6000; // Elytra - completely remove snooper
     private static final int OVERLOADED_THRESHOLD = 2000;
     private static final int OVERLOADED_WARNING_INTERVAL = 15000;
     public static final String LEVEL_STORAGE_PROTOCOL = "level";
@@ -214,7 +214,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private static final long DELAYED_TASKS_TICK_EXTENSION = 50L;
     public LevelStorageSource.LevelStorageAccess storageSource;
     public final PlayerDataStorage playerDataStorage;
-    private final Snooper snooper = new Snooper("server", this, Util.getMillis());
+    //private final Snooper snooper = new Snooper("server", this, Util.getMillis()); // Elytra - completely remove snooper
     private final List<Runnable> tickables = Lists.newArrayList();
     private MetricsRecorder metricsRecorder;
     private ProfilerFiller profiler;
@@ -1082,9 +1082,11 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             }
         }
 
+        /* // Elytra - completely remove snooper
         if (this.snooper.isStarted()) {
             this.snooper.interrupt();
         }
+        */
 
         this.resources.close();
 
@@ -1511,6 +1513,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             // MinecraftServer.LOGGER.debug("Autosave finished"); // Paper
         //} // Paper
 
+        /* // Elytra - completely remove snooper
         this.profiler.push("snooper");
         if (((DedicatedServer) this).getProperties().snooperEnabled && !this.snooper.isStarted() && this.tickCount > 100) { // Spigot
             this.snooper.start();
@@ -1519,6 +1522,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         if (((DedicatedServer) this).getProperties().snooperEnabled && this.tickCount % 6000 == 0) { // Spigot
             this.snooper.prepare();
         }
+        */
 
         io.papermc.paper.util.CachedLists.reset(); // Paper
         this.profiler.pop();
@@ -1866,6 +1870,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         this.resourcePackHash = hash;
     }
 
+    /* // Elytra - completely remove snooper
     @Override
     public void populateSnooper(Snooper snooper) {
         snooper.setDynamicData("whitelist_enabled", (Object) false);
@@ -1899,7 +1904,9 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         snooper.setDynamicData("worlds", (Object) i);
     }
+    */
 
+    /* // Elytra - completely remove snooper
     @Override
     public void populateSnooperInitial(Snooper snooper) {
         snooper.setFixedData("singleplayer", this.isSingleplayer());
@@ -1907,11 +1914,14 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         snooper.setFixedData("gui_supported", GraphicsEnvironment.isHeadless() ? "headless" : "supported");
         snooper.setFixedData("dedicated", this.isDedicatedServer());
     }
+    */
 
+    /* // Elytra - completely remove snooper
     @Override
     public boolean isSnooperEnabled() {
         return true;
     }
+    */
 
     public abstract boolean isDedicatedServer();
 
@@ -2008,9 +2018,11 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         return this.tickCount;
     }
 
+    /* // Elytra - completely remove snooper
     public Snooper getSnooper() {
         return this.snooper;
     }
+    */
 
     public int getSpawnProtectionRadius() {
         return 16;
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index e2901132b78126c0a4eb04363dfe6a0dccd1313f..7a4d7c382b2a1e60450bbbd55d98141e1e05feb7 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -498,6 +498,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         return this.getProperties().allowNether;
     }
 
+    /* // Elytra - completely remove snooper
     @Override
     public void populateSnooper(Snooper snooper) {
         snooper.setDynamicData("whitelist_enabled", (Object) this.getPlayerList().isUsingWhitelist());
@@ -509,6 +510,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
     public boolean isSnooperEnabled() {
         return this.getProperties().snooperEnabled;
     }
+    */
 
     public void handleConsoleInput(String command, CommandSourceStack commandSource) {
         this.serverCommandQueue.add(new ConsoleInput(command, commandSource));
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
index 0544ac93513d3a274bfb53bb6120bd598f4d603b..fb9ae0d339f1302144e286e68cbaca0b4cc94454 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
@@ -43,7 +43,7 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
     public final boolean hardcore;
     public final boolean allowNether;
     public final boolean spawnMonsters;
-    public final boolean snooperEnabled;
+    //public final boolean snooperEnabled; // Elytra - completely remove snooper
     public final boolean useNativeTransport;
     public final boolean enableCommandBlock;
     public final int spawnProtection;
@@ -88,11 +88,12 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
         this.hardcore = this.get("hardcore", false);
         this.allowNether = this.get("allow-nether", true);
         this.spawnMonsters = this.get("spawn-monsters", true);
+        /* // Elytra - completely remove snooper
         if (this.get("snooper-enabled", true)) {
             ;
         }
-
-        this.snooperEnabled = false;
+        */
+        //this.snooperEnabled = false; // Elytra - completely remove snooper
         this.useNativeTransport = this.get("use-native-transport", true);
         this.enableCommandBlock = this.get("enable-command-block", false);
         this.spawnProtection = this.get("spawn-protection", 16);
