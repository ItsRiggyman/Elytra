From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Isaac Clowes <isaacgamingclowes@gmail.com>
Date: Thu, 28 Oct 2021 14:23:59 +0100
Subject: [PATCH] Rebranding


diff --git a/build.gradle.kts b/build.gradle.kts
index 0bd09bd56968660437a94ec078a13ee78339fa0e..a88ef82f000ff8e80407df6d4a7225955f42ac18 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -25,7 +25,7 @@ repositories {
 }
 
 dependencies {
-    implementation(project(":Airplane-API")) // Airplane // Paper
+    implementation(project(":Elytra-API")) // Elytra // Airplane // Paper
     implementation("io.papermc.paper:paper-mojangapi:1.17.1-R0.1-SNAPSHOT") // Airplane
     // Paper start
     implementation("org.jline:jline-terminal-jansi:3.12.1")
@@ -86,7 +86,7 @@ tasks.jar {
             "Main-Class" to "org.bukkit.craftbukkit.Main",
             "Implementation-Title" to "CraftBukkit",
             "Implementation-Version" to "git-Paper-$implementationVersion",
-            "Implementation-Version" to "git-Airplane-$implementationVersion", // Airplane
+            "Implementation-Version" to "git-Elytra-$implementationVersion", // Elytra
             "Implementation-Vendor" to date, // Paper
             "Specification-Title" to "Bukkit",
             "Specification-Version" to project.version,
diff --git a/src/main/java/com/destroystokyo/paper/Metrics.java b/src/main/java/com/destroystokyo/paper/Metrics.java
index f5d01bce4d5547b4aeca96b7962b2090f47ea541..3513c5701aeb07fcaae0d7eda56294fde1010410 100644
--- a/src/main/java/com/destroystokyo/paper/Metrics.java
+++ b/src/main/java/com/destroystokyo/paper/Metrics.java
@@ -593,7 +593,7 @@ public class Metrics {
             boolean logFailedRequests = config.getBoolean("logFailedRequests", false);
             // Only start Metrics, if it's enabled in the config
             if (config.getBoolean("enabled", true)) {
-                Metrics metrics = new Metrics("Airplane", serverUUID, logFailedRequests, Bukkit.getLogger()); // Tuinity - we have our own bstats page // Airplane
+                Metrics metrics = new Metrics("Elytra", serverUUID, logFailedRequests, Bukkit.getLogger()); // Tuinity - we have our own bstats page // Airplane // Elytra
 
                 metrics.addCustomChart(new Metrics.SimplePie("minecraft_version", () -> {
                     String minecraftVersion = Bukkit.getVersion();
@@ -603,7 +603,7 @@ public class Metrics {
 
                 metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> Bukkit.getOnlinePlayers().size()));
                 metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : "offline"));
-                metrics.addCustomChart(new Metrics.SimplePie("airplane_version", () -> (Metrics.class.getPackage().getImplementationVersion() != null) ? Metrics.class.getPackage().getImplementationVersion() : "unknown")); // Tuinity - we have our own bstats page // Airplane
+                metrics.addCustomChart(new Metrics.SimplePie("elytra_version", () -> (Metrics.class.getPackage().getImplementationVersion() != null) ? Metrics.class.getPackage().getImplementationVersion() : "unknown")); // Tuinity - we have our own bstats page // Airplane // Elytra
 
                 metrics.addCustomChart(new Metrics.DrilldownPie("java_version", () -> {
                     Map<String, Map<String, Integer>> map = new HashMap<>();
diff --git a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
index ece77f5ea4b14bbed7c070131b3251ea86764538..498a448d47435379e56c251d5eae780cb84243c9 100644
--- a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
+++ b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
@@ -31,8 +31,8 @@ public class PaperVersionFetcher implements VersionFetcher {
     @Nonnull
     @Override
     public Component getVersionMessage(@Nonnull String serverVersion) {
-        String[] parts = serverVersion.substring("git-Paper-".length()).split("[-\\s]");
-        final Component updateMessage = getUpdateStatusMessage("PaperMC/Paper", GITHUB_BRANCH_NAME, parts[0]);
+        String[] parts = serverVersion.substring("git-Elytra-".length()).split("[-\\s]");
+        final Component updateMessage = getUpdateStatusMessage("ItsRiggyman/Elytra", GITHUB_BRANCH_NAME, parts[0]);
         final Component history = getHistory();
 
         return history != null ? TextComponent.ofChildren(updateMessage, Component.newline(), history) : updateMessage;
diff --git a/src/main/java/com/destroystokyo/paper/console/PaperConsole.java b/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
index e0b1f0671d16ddddcb6725acd25a1d1d69e42701..0fc452d12f05969bcbe5595d1adb925a1b6e1ba3 100644
--- a/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
+++ b/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
@@ -17,7 +17,7 @@ public final class PaperConsole extends SimpleTerminalConsole {
     @Override
     protected LineReader buildReader(LineReaderBuilder builder) {
         builder
-                .appName("Paper")
+                .appName("Elytra")
                 .variable(LineReader.HISTORY_FILE, java.nio.file.Paths.get(".console_history"))
                 .completer(new ConsoleCommandCompleter(this.server))
                 .option(LineReader.Option.COMPLETE_IN_WORD, true);
diff --git a/src/main/java/gg/airplane/AirplaneVersionFetcher.java b/src/main/java/gg/airplane/AirplaneVersionFetcher.java
deleted file mode 100644
index e79ec7919e6cf160fec1cb981d85f0f33c316b41..0000000000000000000000000000000000000000
--- a/src/main/java/gg/airplane/AirplaneVersionFetcher.java
+++ /dev/null
@@ -1,137 +0,0 @@
-package gg.airplane;
-
-import com.destroystokyo.paper.VersionHistoryManager;
-import com.destroystokyo.paper.util.VersionFetcher;
-import com.google.gson.Gson;
-import com.google.gson.JsonObject;
-import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.JoinConfiguration;
-import net.kyori.adventure.text.format.NamedTextColor;
-import net.kyori.adventure.text.format.TextDecoration;
-import org.bukkit.craftbukkit.CraftServer;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
-import java.io.IOException;
-import java.net.URI;
-import java.net.http.HttpClient;
-import java.net.http.HttpRequest;
-import java.net.http.HttpResponse;
-import java.nio.charset.StandardCharsets;
-import java.util.concurrent.TimeUnit;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-import static net.kyori.adventure.text.Component.text;
-import static net.kyori.adventure.text.format.NamedTextColor.GREEN;
-import static net.kyori.adventure.text.format.NamedTextColor.RED;
-
-public class AirplaneVersionFetcher implements VersionFetcher {
-
-    private static final Logger LOGGER = Logger.getLogger("AirplaneVersionFetcher");
-    private static final HttpClient client = HttpClient.newHttpClient();
-
-    private static final URI JENKINS_URI = URI.create("https://ci.tivy.ca/job/Airplane-1.17/lastSuccessfulBuild/buildNumber");
-    private static final String GITHUB_FORMAT = "https://api.github.com/repos/TECHNOVE/Airplane/compare/ver/1.17...%s";
-
-    private static final HttpResponse.BodyHandler<JsonObject> JSON_OBJECT_BODY_HANDLER = responseInfo -> HttpResponse.BodySubscribers.mapping(
-            HttpResponse.BodySubscribers.ofString(StandardCharsets.UTF_8),
-            string -> new Gson().fromJson(string, JsonObject.class)
-    );
-
-    @Override
-    public long getCacheTime() {
-        return TimeUnit.MINUTES.toMillis(30);
-    }
-
-    @Override
-    public @NotNull Component getVersionMessage(final @NotNull String serverVersion) {
-        final String[] parts = CraftServer.class.getPackage().getImplementationVersion().split("-");
-        @NotNull Component component;
-
-        if (parts.length != 3) {
-            component = text("Unknown server version.", RED);
-        } else {
-            final String versionString = parts[2];
-
-            try {
-                component = this.fetchJenkinsVersion(Integer.parseInt(versionString));
-            } catch (NumberFormatException e) {
-                component = this.fetchGithubVersion(versionString.substring(1, versionString.length() - 1));
-            }
-        }
-
-        final @Nullable Component history = this.getHistory();
-        return history != null ? Component.join(JoinConfiguration.noSeparators(), component, Component.newline(), this.getHistory()) : component;
-    }
-
-    private @NotNull Component fetchJenkinsVersion(final int versionNumber) {
-        final HttpRequest request = HttpRequest.newBuilder(JENKINS_URI).build();
-        try {
-            final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
-            if (response.statusCode() != 200) {
-                return text("Received invalid status code (" + response.statusCode() + ") from server.", RED);
-            }
-
-            int latestVersionNumber;
-            try {
-                latestVersionNumber = Integer.parseInt(response.body());
-            } catch (NumberFormatException e) {
-                LOGGER.log(Level.WARNING, "Received invalid response from Jenkins \"" + response.body() + "\".");
-                return text("Received invalid response from server.", RED);
-            }
-
-            final int versionDiff = latestVersionNumber - versionNumber;
-            return this.getResponseMessage(versionDiff);
-        } catch (IOException | InterruptedException e) {
-            LOGGER.log(Level.WARNING, "Failed to look up version from Jenkins", e);
-            return text("Failed to retrieve version from server.", RED);
-        }
-    }
-
-    // Based off code contributed by Techcable <Techcable@outlook.com> in Paper/GH-65
-    private @NotNull Component fetchGithubVersion(final @NotNull String hash) {
-        final URI uri = URI.create(String.format(GITHUB_FORMAT, hash));
-        final HttpRequest request = HttpRequest.newBuilder(uri).build();
-        try {
-            final HttpResponse<JsonObject> response = client.send(request, JSON_OBJECT_BODY_HANDLER);
-            if (response.statusCode() != 200) {
-                return text("Received invalid status code (" + response.statusCode() + ") from server.", RED);
-            }
-
-            final JsonObject obj = response.body();
-            final int versionDiff = obj.get("behind_by").getAsInt();
-
-            return this.getResponseMessage(versionDiff);
-        } catch (IOException | InterruptedException e) {
-            LOGGER.log(Level.WARNING, "Failed to look up version from GitHub", e);
-            return text("Failed to retrieve version from server.", RED);
-        }
-    }
-
-    private @NotNull Component getResponseMessage(final int versionDiff) {
-        return switch (Math.max(-1, Math.min(1, versionDiff))) {
-            case -1 ->
-                text("You are running an unsupported version of Airplane.", RED);
-            case 0 ->
-                text("You are on the latest version!", GREEN);
-            default ->
-                text("You are running " + versionDiff + " version" + (versionDiff == 1 ? "" : "s") + " beyond. " +
-                    "Please update your server when possible to maintain stability, security, and receive the latest optimizations.", RED);
-        };
-    }
-
-    private @Nullable Component getHistory() {
-        final VersionHistoryManager.VersionData data = VersionHistoryManager.INSTANCE.getVersionData();
-        if (data == null) {
-            return null;
-        }
-
-        final String oldVersion = data.getOldVersion();
-        if (oldVersion == null) {
-            return null;
-        }
-
-        return Component.text("Previous version: " + oldVersion, NamedTextColor.GRAY, TextDecoration.ITALIC);
-    }
-}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 49821f441886b4de2cac5b1b13981e2161992f98..38b6bc585e907598c75bc030bb164996b55ebc2e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1726,7 +1726,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     @DontObfuscate
     public String getServerModName() {
-        return "Airplane"; // Airplane // Paper - Paper > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
+        return "Elytra"; // Elytra // Airplane // Paper - Paper > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
     }
 
     public SystemReport fillSystemReport(SystemReport details) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index ae2c4388eddef529fba5d5eae354ee15c6e36c9d..7df144e724428745301f1fd3fdca32fcb7cf69f3 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -251,7 +251,7 @@ import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
 
 public final class CraftServer implements Server {
-    private final String serverName = "Airplane"; // Paper // Airplane
+    private final String serverName = "Elytra"; // Paper // Airplane // Elytra
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 25bb190bf7e08539a3590ee35a01f1d816e48d83..46f06c3c6b361f8455ef451ed2baa200bbbc0317 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -394,7 +394,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     @Override
     public com.destroystokyo.paper.util.VersionFetcher getVersionFetcher() {
-        return new gg.airplane.AirplaneVersionFetcher(); // Airplane
+        return new com.destroystokyo.paper.PaperVersionFetcher(); // Elytra
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
index 1788d79ea489e446d3d9f541693d4ba3dfc26015..c13f22b081192c2bb9916a33d43e27143e0be38a 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
@@ -11,7 +11,7 @@ public final class Versioning {
     public static String getBukkitVersion() {
         String result = "Unknown-Version";
 
-        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/gg.airplane/airplane-api/pom.properties"); // Tuinity // Airplane
+        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/org.itsriggyman.elytra/elytra-api/pom.properties"); // Tuinity // Airplane // Elytra
         Properties properties = new Properties();
 
         if (stream != null) {
