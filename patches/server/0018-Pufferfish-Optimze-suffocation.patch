From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kevin Raneri <kevin.raneri@gmail.com>
Date: Tue, 9 Nov 2021 14:33:16 -0500
Subject: [PATCH] (Pufferfish) Optimze entity coordinate key

Original code by Pufferfish Studios LLC, licensed under GNU General Public License v3.0
You can find the original code on https://github.com/pufferfish-gg/Pufferfish

The isInWall check to determine suffocation is quite expensive, and
often is completely unnecessary to check. We do two things here to
improve this:

1. We only check for suffocation once per 20 ticks. The maximum
no-damage ticks value means that this change should be extremely
difficult, if not impossible, for players to notice.

2. We additionally execute a check to see if the player can even take
damage in the first place. This check doesn't improve performance much
but is so much cheaper than the suffocation check that it's worth
keeping it.

diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index df12ba04df24e1c70c43e00283ea2a78ae2ca422..5d712c59d167b387508ff51e5fe50f961ab764b9 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -393,7 +393,7 @@ public abstract class LivingEntity extends Entity {
         boolean flag = this instanceof net.minecraft.world.entity.player.Player;
 
         if (this.isAlive()) {
-            if (this.isInWall()) {
+            if (tickCount % 20 == 0 && couldPossiblyBeHurt(1.0F) && this.isInWall()) { // Elytra - optimize suffocation
                 this.hurt(DamageSource.IN_WALL, 1.0F);
             } else if (flag && !this.level.getWorldBorder().isWithinBounds(this.getBoundingBox())) {
                 double d0 = this.level.getWorldBorder().getDistanceToBorder((Entity) this) + this.level.getWorldBorder().getDamageSafeZone();
@@ -1292,6 +1292,15 @@ public abstract class LivingEntity extends Entity {
         return this.getHealth() <= 0.0F;
     }
 
+    // Elytra start - optimize suffocation
+    public boolean couldPossiblyBeHurt(float amount) {
+        if ((float) this.invulnerableTime > (float) this.invulnerableDuration / 2.0F && amount <= this.lastHurt) {
+            return false;
+        }
+        return true;
+    }
+    // Elytra end
+
     @Override
     public boolean hurt(DamageSource source, float amount) {
         if (this.isInvulnerableTo(source)) {
